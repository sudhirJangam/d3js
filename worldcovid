<!DOCTYPE html>
<meta charset="utf-8">
<style>

  .land {
    fill: #e5e5e5;
  }

  .border {
    fill: #e5e5e5;
    stroke: #fff;
    stroke-linejoin: round;
    stroke-linecap: round;
  }

body {
//  background-color: #181818;
}

/*hovercard formatting*/
.tooltip {
  position: absolute;
  max-width: 400px;
  height: auto;
  padding: 5px;
  background-color: #606060;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
  border-radius: 5px;
  -webkit-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
  -moz-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
  box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
  pointer-events: none; /* Â¡MUY IMPORTANTE! */
  font-family: sans-serif;
  font-size:12px;
  color: #fff;
}


</style>
<body>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script src="https://d3js.org/queue.v1.min.js"></script>
<script src="https://d3js.org/topojson.v1.min.js"></script>
<script src="../colorbrewer.js"></script>
<div id="control" >
 Date : <select id="DateVal"></select>
</div>
 <div id="chart"></div>
<script>



var format = d3.format(",");
var parseTime = d3.timeParse("%d/%m/%Y");
var FormatDt = d3.timeFormat("%Y-%m-%d");
var formatNum = d3.format(",.0r");




var margin = {top: 0, right: 0, bottom: 0, left: 0},
            width = 960 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

//define color pallette using colorbrewer
var color = d3.scaleThreshold()
     .domain([0,10,50,100,500,1000,5000,10000,50000,150000])
     .range(colorbrewer.Deep[10]);
var path = d3.geoPath();

var svg =  d3.select("#chart")
            .append("svg")
            .attr("width", width)
            .attr("height", height)
            .append('g')
            .attr('class', 'map');

var projection = d3.geoMercator()
                   .scale(130)
                  .translate( [width / 2, height / 1.5]);

var path = d3.geoPath().projection(projection);

var barTooltip = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0)
    .style("width",600);


function buildChart(data,covid,BusDt) {
  var casesById = {};
        covid.forEach(function(d) { casesById[d.countryterritoryCode] = [d.cases,d.deaths]; });
  data.features.forEach(function(d) { d.cases = casesById[d.id]===undefined ? 0:  casesById[d.id][0];
                                         d.deaths = casesById[d.id]===undefined ? 0:  casesById[d.id][1];
                                       d.BusDate =  BusDt; });
  //data.features.forEach(function(d) { d.deaths = casesById[d.id]===undefined ? 0:  casesById[d.id][1] });
        console.log(data.features);
   svg.append("g")
      .attr("class", "countries")
    .selectAll("path")
      .data(data.features)
    .enter().append("path")
      .attr("d", path)
      .style("fill", function(d) { return color(d.cases); })
      .style('stroke', 'white')
      .style('stroke-width', 1.5)
      .style("opacity",0.8)
      // tooltips
        .style("stroke","white")
        .style('stroke-width', 0.3)
        .on('mouseover',function(d){
          //Show Tooltip

        barTooltip.transition()
            .duration(500)
            .style("opacity", .7);

        var tip = "<h3>" + d.properties.name + "</h3>";
        var tip = tip+"<strong>Date  : </strong>" + d.BusDate + "<br/>";
        var tip = tip+"<strong>Cases  : </strong>" + formatNum(d.cases) + "<br/>";
        var tip = tip+"<strong>Deaths : </strong>" + formatNum(d.deaths)+ "<br/>";

        barTooltip.html(tip)
            .style("left", (d3.event.pageX) + "px")
            .style("top", (d3.event.pageY) + "px");

          d3.select(this)
            .style("opacity", 1)
            .style("stroke","white")
            .style("stroke-width",3);
        })
        .on('mouseout', function(d){
          //hide Tootip
          barTooltip.transition()
            .duration(500)
            .style("opacity", 0);


          d3.select(this)
            .style("opacity", 0.8)
            .style("stroke","white")
            .style("stroke-width",0.3);
        });

  svg.append("path")
      .datum(topojson.mesh(data.features, function(a, b) { return a.id !== b.id; }))
       // .datum(topojson.mesh(data.features, function(a, b) { return a !== b; }))
      .attr("class", "border")
      .attr("d", path);

}

// process data and topojson

queue()
    .defer(d3.json, "../world.json")
    .defer(d3.json, "covid19.json")
    .await(ready);

function ready(error, data, covid) {
  covid.records.forEach(function(d) {
    d.BusDate =  FormatDt(parseTime(d.dateRep));
    d.cases = +d.cases;
    d.deaths = +d.deaths;
  });
  console.log(covid);

// set combo box

  var  Options=  [];
  var OptionData=[];
  covid.records.forEach(function(d) {
  if (Options.indexOf(d.dateRep) === -1) {
  Options.push(d.dateRep);
  var val={BusDate : d.BusDate } ;
  OptionData.push(val);
  }
  });

  function SortByID(x,y) {
  return x.BusDate - y.BusDate;
  }

  OptionData.sort(SortByID);
  d3.select('#DateVal')
  .on('change',onchange)
  .selectAll('option')
  .data(OptionData).enter()
  .append('option')
  .text(function (d) { return d.BusDate; });


  console.log(OptionData);
  SubData=covid.records.filter(function(d) {  return d.BusDate==OptionData[0].BusDate}) ;

  console.log(covid);
  console.log(data);

 function onchange() {
       DateValue = d3.select("#DateVal").node().value;
       console.log(DateValue);
       console.log(covid);
       SubData=covid.records.filter(function(d) {  return d.BusDate==DateValue }) ;
       console.log(SubData);
       buildChart(data,SubData,DateValue);
           };


        //set world map
buildChart(data,SubData,OptionData[0].BusDate);
}

</script>
</body>
</html>
